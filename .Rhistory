setwd("~/Desktop/Coursera Capstone Project/NOAA")
install.packages("devtools")
library(devtools)
install.packages("roxygen2")
library(roxygen2)
setwd("~/Desktop/Coursera Capstone Project/NOAA")
roxygen2::roxygenise()
install.packages("leaflet")
load_all()
usethis::use_vignette()
roxygen2::roxygenise()
#'Startup
setwd("~/Desktop/Coursera Capstone Project")
library(magrittr)
library(tidyverse)
install.packages("leaflet")
library(leaflet)
data <- readr::read_delim("earthquakesFile2.txt", delim = "\t")
install.packages("leaflet")
#' Cleans raw data from NOAA
#'
#' \code{eq_clean_data} cleans date, latitude and longitude, and location name
#' from NOAA raw data
#'
#' @param raw_data A data frame with raw data obtained from NOAA website (see below)
#'
#' @return A data frame with cleaned date, latitude, longitude and location
#' columns
#'
#' @details The function takes raw data from NOAA website as an input
#' \url{https://www.ngdc.noaa.gov/nndc/struts/form?t=101650&s=1&d=1}. It adds
#' a column DATE with cleaned date (Date format), transforms LATITUDE and
#' LONGITUDE columns as numeric objects and transforms LOCATION_NAME by removing
#' the country and transforming to title case.
#'
#' @import dplyr
#' @importFrom lubridate years
#'
#' @examples
#' \dontrun{
#' data <- readr::read_delim("earthquakes.tsv.gz", delim = "\t")
#' clean_data <- eq_clean_data(data)
#' }
#'
#' @export
eq_clean_data <- function(raw_data){
names(raw_data) <- toupper(names(raw_data))
names(raw_data) <- sub(" ","_",names(raw_data))
clean_data <- eq_location_clean(raw_data)
dates <- apply(clean_data, 1,
function(row) ifelse(as.numeric(row["YEAR"]) < 0,
as.Date(paste(abs(as.numeric(row["YEAR"])),
ifelse(is.na(row["MONTH"]),"01", row["MONTH"]),
ifelse(is.na(row["DAY"]), "01", row["DAY"]), sep = "-")) - lubridate::years(abs(as.numeric(row["YEAR"]))*2),
as.Date(paste(row["YEAR"],
ifelse(is.na(row["MONTH"]),"01", row["MONTH"]),
ifelse(is.na(row["DAY"]), "01", row["DAY"]), sep = "-"))))
clean_data$DATE <- as.Date(dates,format = "%Y-%m-%d", origin = "1970-01-01", tz = "GMT")
clean_data$LATITUDE <- as.numeric(clean_data$LATITUDE)
clean_data$LONGITUDE <- as.numeric(clean_data$LONGITUDE)
return(clean_data)
}
#' Cleans earthquake location data
#'
#' @param raw_data A data frame with raw data obtained from NOAA website
#'
#' @return A data frame with cleaned LOCATION_NAME column
#'
#' @details This function transforms NOAA raw data frame's LOCATION_NAME column by
#' trimming the country name (if applicable) and converting to title case
#'
#' @note The function is not exported
#'
#' @examples
#' \dontrun{
#' raw_data <- readr::read_delim("data.gz", delim = "\t")
#' clean_data <- eq_location_clean(raw_data)
#' }
#'
eq_location_clean <- function(raw_data){
raw_data$LOCATION_NAME <- sapply(raw_data$LOCATION_NAME,
function(loc) {
x <- gsub(".*:  ", "", loc)
s <- strsplit(tolower(x), " ")[[1]]
paste(toupper(substring(s, 1,1)), substring(s, 2),
sep="", collapse=" ") })
return(raw_data)
}
#' Creates a timeline plot of earthquakes
#'
#' @description This geom plots a timeline of earthquakes in one line with
#' options to group by country, color by number of casualties and size by scale
#'
#' @inheritParams ggplot2::geom_point
#'
#' @details The function creates a plot of timeline of earthquakes based on cleaned NOAA
#' data. It requires \code{x} aesthetics. An optional \code{y} aesthetics can
#' be used to group data by a selected variable (for example country).
#' @export
#'
#' @import ggplot2
#' @import grid
#' @importFrom scales alpha
#'
#' @examples
#' \dontrun{
#' data %>% eq_clean_data() %>%
#'    filter(COUNTRY %in% c("GREECE", "ITALY"), YEAR > 2000) %>%
#'    ggplot(aes(x = DATE,
#'               y = COUNTRY,
#'               color = as.numeric(TOTAL_DEATHS),
#'               size = as.numeric(EQ_PRIMARY)
#'    )) +
#'    geom_timeline() +
#'    theme_timeline() +
#'    labs(size = "Richter scale value", color = "# deaths")
#' }
geom_timeline <- function(mapping = NULL, data = NULL, stat = "identity",
position = "identity", na.rm = FALSE,
show.legend = NA, inherit.aes = TRUE, ...) {
ggplot2::layer(
geom = GeomTimeline, mapping = mapping, data = data, stat = stat,
position = position, show.legend = show.legend, inherit.aes = inherit.aes,
params = list(na.rm = na.rm, ...)
)
}
GeomTimeline <-
ggplot2::ggproto(
"GeomTimeline", ggplot2::Geom,
required_aes = c("x"),
default_aes = ggplot2::aes(colour = "grey", size = 1, alpha = 0.2,
shape = 21, fill = "grey", stroke = 0.5),
draw_key = ggplot2::draw_key_point,
draw_panel = function(data, panel_scales, coord) {
if (!("y" %in% colnames(data))) {
data$y <- 0.15
}
coords <- coord$transform(data, panel_scales)
points <- grid::pointsGrob(
coords$x, coords$y,
pch = coords$shape, size = unit(coords$size / 4, "char"),
gp = grid::gpar(
col = scales::alpha(coords$colour, coords$alpha),
fill = scales::alpha(coords$colour, coords$alpha)
)
)
y_lines <- unique(coords$y)
lines <- grid::polylineGrob(
x = unit(rep(c(0, 1), each = length(y_lines)), "npc"),
y = unit(c(y_lines, y_lines), "npc"),
id = rep(seq_along(y_lines), 2),
gp = grid::gpar(col = "grey",
lwd = .pt)
)
grid::gList(points, lines)
}
)
#' Creates a theme for timeline visualization
#'
#' @description  A simple theme that makes \code{\link{geom_timeline}}
#' visualize better.
#'
#' @examples
#' \dontrun{
#' data %>% eq_clean_data() %>%
#' filter(COUNTRY %in% c("GREECE", "ITALY"), YEAR > 2000) %>%
#'    ggplot(aes(x = DATE,
#'               y = COUNTRY,
#'               color = as.numeric(TOTAL_DEATHS),
#'               size = as.numeric(EQ_PRIMARY)
#'    )) +
#'    geom_timeline() +
#'    theme_timeline()
#' }
#'
#' @importFrom ggplot2 theme element_blank element_line
#'
#' @export
#'
theme_timeline <- function() {
ggplot2::theme(
plot.background = ggplot2::element_blank(),
panel.background = ggplot2::element_blank(),
legend.key = ggplot2::element_blank(),
axis.title.y = ggplot2::element_blank(),
axis.line.x = ggplot2::element_line(size = 1),
axis.ticks.y = ggplot2::element_blank(),
legend.position = "bottom"
)
}
#' Creates labels for the timeline of earthquakes
#'
#' @description This geom plots timeline labels of earthquakes. It assumes that
#' \code{geom_timeline} was used to create the timelines
#'
#' @inheritParams ggplot2::geom_text
#' @param n_max An integer. If used, it only plots the labels for the
#' \code{n_max} largest earthquakes in the selected group in the timeline
#'
#' @details The function plots timeline labels of earthquakes based on cleaned
#' NOAA data. It should be used with combination with \code{geom_timeline}. The
#' required aesthetics for this geom is \code{label} that should contain
#' string for labeling each data point.
#'
#' @export
#'
#' @importFrom ggplot2 layer draw_key_blank
#' @importFrom dplyr %>% group_by top_n ungroup
#' @importFrom grid gpar linesGrob textGrob gList
#'
#' @examples
#' \dontrun{
#' data %>% eq_clean_data() %>%
#'    filter(COUNTRY %in% c("GREECE", "ITALY"), YEAR > 2000) %>%
#'    ggplot(aes(x = DATE,
#'               y = COUNTRY,
#'               color = as.numeric(TOTAL_DEATHS),
#'               size = as.numeric(EQ_PRIMARY)
#'    )) +
#'    geom_timeline() +
#'    geom_timeline_label(aes(label = LOCATION_NAME), n_max = 5) +
#'    theme_timeline() +
#'    labs(size = "Richter scale value", color = "# deaths")
#' }
geom_timeline_label <- function(mapping = NULL, data = NULL, stat = "identity",
position = "identity", ..., na.rm = FALSE,
n_max = NULL, show.legend = NA,
inherit.aes = TRUE) {
ggplot2::layer(
geom = GeomTimelineLabel, mapping = mapping,
data = data, stat = stat, position = position,
show.legend = show.legend, inherit.aes = inherit.aes,
params = list(na.rm = na.rm, n_max = n_max, ...)
)
}
GeomTimelineLabel <-
ggplot2::ggproto(
"GeomTimelineLabel", ggplot2::Geom,
required_aes = c("x", "label"),
draw_key = ggplot2::draw_key_blank,
setup_data = function(data, params) {
if (!is.null(params$n_max)) {
if (!("size" %in% colnames(data))) {
stop(paste("'size' aesthetics needs to be",
"provided when 'n_max' is defined."))
}
data <- data %>%
dplyr::group_by_("group") %>%
dplyr::top_n(params$n_max, size) %>%
dplyr::ungroup()
}
data
},
draw_panel = function(data, panel_scales, coord, n_max) {
if (!("y" %in% colnames(data))) {
data$y <- 0.15
}
coords <- coord$transform(data, panel_scales)
n_grp <- length(unique(data$group))
offset <- 0.2 / n_grp
lines <- grid::polylineGrob(
x = unit(c(coords$x, coords$x), "npc"),
y = unit(c(coords$y, coords$y + offset), "npc"),
id = rep(1:dim(coords)[1], 2),
gp = grid::gpar(
col = "grey"
)
)
names <- grid::textGrob(
label = coords$label,
x = unit(coords$x, "npc"),
y = unit(coords$y + offset, "npc"),
just = c("left", "bottom"),
rot = 45
)
grid::gList(lines, names)
}
)
#' Creates a leaflet map of earthquakes
#'
#' This function creates a \code{leaflet} map of selected earthquakes based on
#' input NOAA earthquake cleaned data.
#'
#' @param data A data frame containing cleaned NOAA earthquake data
#' @param annot_col A character. The name of the column in the data that should
#' be used as descriptor.
#'
#' @return A leaflet map with earthquakes and annotations.
#' @export
#'
#' @import leaflet
#'
#' @examples
#' \dontrun{
#' eq_map(data, annot_col = "LOCATION_NAME")
#' }
eq_map <- function(data, annot_col) {
map <- leaflet::leaflet() %>%
leaflet::addTiles() %>%
leaflet::addCircleMarkers(lng = data$LONGITUDE, lat = data$LATITUDE,
radius = data$EQ_PRIMARY, weight = 1,
popup = data[[annot_col]])
return(map)
}
#' Creates a label for a leaflet map
#'
#' This function creates a label for the \code{leaflet} map based on location
#' name, magnitude and casualties from NOAA earthquake data
#'
#' @param data A data frame containing cleaned NOAA earthquake data
#'
#' @return A character vector with labels
#'
#' @details The input \code{data.frame} requires the following columns:
#' LOCATION_NAME, EQ_PRIMARY and TOTAL_DEATHS with the earthquake location, magintude and
#' total casualties respectively.
#'
#' @export
#'
#' @examples
#' \dontrun{
#' eq_create_label(data)
#' }
eq_create_label <- function(data) {
popup_text <- with(data, {
part1 <- ifelse(is.na(LOCATION_NAME), "",
paste("<strong>Location:</strong>",
LOCATION_NAME))
part2 <- ifelse(is.na(EQ_PRIMARY), "",
paste("<br><strong>Magnitude</strong>",
EQ_PRIMARY))
part3 <- ifelse(is.na(TOTAL_DEATHS), "",
paste("<br><strong>Total deaths:</strong>",
TOTAL_DEATHS))
paste0(part1, part2, part3)
})
}
roxygen2::roxygenise()
setwd("~/Desktop/Coursera Capstone Project/NOAA")
roxygen2::roxygenise()
install.packages("leaflet")
install.packages("leaflet")
load_all()
install.packages("usethis")
library(usethis)
usethis::use_vignette()
usethis::use_vignette("NOAAvignette")
?eq_map
?geom_timeline
install.packages("rmarkdown")
install.packages("rmarkdown")
setwd("~/Desktop/Coursera Capstone Project/NOAA")
library(rmarkdown)
rmarkdown::render("NOAAvignette.Rmd")
setwd("~/Desktop/Coursera Capstone Project/NOAA/vignettes")
rmarkdown::render("NOAAvignette.Rmd")
rmarkdown::render("NOAAvignette.Rmd")
rmarkdown::render("NOAAvignette.Rmd")
rmarkdown::render("NOAAvignette.Rmd")
rmarkdown::render("NOAAvignette.Rmd")
setwd("~/Desktop/Coursera Capstone Project")
setwd("~/Desktop/Coursera Capstone Project/NOAA")
rmarkdown::render("NOAAvignette.Rmd")
setwd("~/Desktop/Coursera Capstone Project/NOAA/vignettes")
rmarkdown::render("NOAAvignette.Rmd")
rmarkdown::render("NOAAvignette.Rmd")
setwd("~/Desktop/Coursera Capstone Project/NOAA/vignettes")
rmarkdown::render("NOAAvignette.Rmd")
rmarkdown::render("NOAAvignette.Rmd")
rmarkdown::render("NOAAvignette.Rmd")
rmarkdown::render("NOAAvignette.Rmd")
rmarkdown::render("NOAAvignette.Rmd")
rmarkdown::render("NOAAvignette.Rmd")
setwd("~/Desktop/Coursera Capstone Project/NOAA")
rmarkdown::render("NOAAvignette.Rmd")
setwd("~/Desktop/Coursera Capstone Project/NOAA/vignettes")
rmarkdown::render("NOAAvignette.Rmd")
rmarkdown::render("NOAAvignette.Rmd")
library(testthat)
library(NOAA)
test_check("NOAA")
setwd("~/Desktop/Coursera Capstone Project/NOAA/tests")
library(testthat)
library(NOAA)
test_check("NOAA")
data
data
library(testthat)
library(NOAA)
test_check("NOAA")
library(testthat)
library(NOAA)
test_check("NOAA")
library(testthat)
library(NOAA)
test_check("NOAA")
library(testthat)
library(NOAA)
test_check("NOAA")
library(testthat)
library(NOAA)
test_check("NOAA")
R.version
setwd("~/Desktop/Coursera Capstone Project/NOAA/vignettes")
rmarkdown::render("NOAAvignette.Rmd")
rmarkdown::render("NOAAvignette.Rmd")
rmarkdown::render("NOAAvignette.Rmd")
rmarkdown::render("NOAAvignette.Rmd")
rmarkdown::render("NOAAvignette.Rmd")
options(rmarkdown.html_vignette.check_title = FALSE)
rmarkdown::render("NOAAvignette.Rmd")
rmarkdown::render("NOAAvignette.Rmd")
rmarkdown::render("NOAAvignette.Rmd")
setwd("~/Desktop/Coursera Capstone Project/NOAA")
